package pck;

import contabancaria.ContaBancaria;
import contabancaria.ContaCorrente;
import contabancaria.ContaPoupanca;
import contabancaria.Executavel2;
import javax.swing.JOptionPane;

/**
 *
 * @author Grácio Macuácua
 */
public class SubMenu extends javax.swing.JPanel {

    /**
     * Creates new form SubMenu
     */
    public SubMenu(ContaBancaria cb) {
        initComponents();
        if(cb.getClass() == ContaCorrente.class) { 
            cc = (ContaCorrente) cb;
            isConta = true;
        }else{
           cp = (ContaPoupanca) cb;
           isConta = false;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        subMenu = new javax.swing.JPanel();
        btnDepositar = new javax.swing.JButton();
        btnSacar = new javax.swing.JButton();
        btnRelatorio = new javax.swing.JButton();
        btnTransferir = new javax.swing.JButton();
        voltar = new javax.swing.JLabel();

        subMenu.setBackground(new java.awt.Color(255, 255, 255));
        subMenu.setForeground(new java.awt.Color(255, 255, 255));

        btnDepositar.setText("Depositar");
        btnDepositar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDepositarActionPerformed(evt);
            }
        });

        btnSacar.setText("Sacar");
        btnSacar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacarActionPerformed(evt);
            }
        });

        btnRelatorio.setText("Gerar Relatório");
        btnRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRelatorioActionPerformed(evt);
            }
        });

        btnTransferir.setText("Transferir");
        btnTransferir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransferirActionPerformed(evt);
            }
        });

        voltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/voltar.png"))); // NOI18N
        voltar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                voltarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout subMenuLayout = new javax.swing.GroupLayout(subMenu);
        subMenu.setLayout(subMenuLayout);
        subMenuLayout.setHorizontalGroup(
            subMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subMenuLayout.createSequentialGroup()
                .addContainerGap(248, Short.MAX_VALUE)
                .addGroup(subMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDepositar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTransferir, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(111, 111, 111)
                .addGroup(subMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSacar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRelatorio, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                .addGap(248, 248, 248))
            .addGroup(subMenuLayout.createSequentialGroup()
                .addComponent(voltar)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        subMenuLayout.setVerticalGroup(
            subMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subMenuLayout.createSequentialGroup()
                .addGroup(subMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(subMenuLayout.createSequentialGroup()
                        .addGroup(subMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSacar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDepositar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(72, 72, 72)
                        .addGroup(subMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTransferir, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(subMenuLayout.createSequentialGroup()
                        .addComponent(voltar)
                        .addGap(327, 327, 327)))
                .addContainerGap(167, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 847, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(subMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 524, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(subMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDepositarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDepositarActionPerformed
        String input = JOptionPane.showInputDialog(null, "Introduza o valor a depositar");
        if(input != null && !input.isBlank()) {
            try{
                if(Double.parseDouble(input) > 0) {
                    if(isConta){
                        cc.depositar(Double.parseDouble(input));
                    }else{
                        cp.depositar(Double.parseDouble(input));
                    }
                } else
                    JOptionPane.showMessageDialog(null, "Valor inválido!", "Atenção", JOptionPane.INFORMATION_MESSAGE);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Valor inválido!", "Atenção", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnDepositarActionPerformed

    private void btnSacarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacarActionPerformed
        String input = JOptionPane.showInputDialog(null, "Introduza o valor a sacar");
        if(input != null && !input.isBlank()) {            
            try{
                if(isConta){
                    if(cc.getSaldo() >= Double.parseDouble(input)){
                        cc.sacar(Double.parseDouble(input));
                        JOptionPane.showMessageDialog(null, "Saque realizado com sucesso!", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    }else{
                        JOptionPane.showMessageDialog(null, "Saldo insuficiente.", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    }
                }else{
                    if(cp.getSaldo() >= Double.parseDouble(input)){
                        cp.sacar(Double.parseDouble(input));
                        JOptionPane.showMessageDialog(null, "Saque realizado com sucesso!", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    }else{
                        JOptionPane.showMessageDialog(null, "Saldo insuficiente.", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            } catch(NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Valor inválido!", "Atenção", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnSacarActionPerformed

    private void btnTransferirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransferirActionPerformed
        String input = JOptionPane.showInputDialog(null, "<html>Introduza o número<br> de conta de destino</html>");
        if(input != null && !input.isBlank()) {
            ContaBancaria cb = Executavel2.banco.procurarConta(Integer.parseInt(input));
            if(cb != null) { 
                input = JOptionPane.showInputDialog(null, "Introduza o valor a transferir");
                if(input != null && !input.isBlank()) {
                    try{
                        if(isConta) {                        
                            if(cc.getSaldo() >= Double.parseDouble(input)){
                                cc.sacar(Double.parseDouble(input));
                                if(cb.getClass() == ContaCorrente.class) {
                                    ContaCorrente ctmp = (ContaCorrente) cb;
                                    ctmp.depositar(Double.parseDouble(input));
                                }else{
                                    ContaPoupanca ctmp = (ContaPoupanca) cb;
                                    ctmp.depositar(Double.parseDouble(input));
                                }
                            }
                        } else{
                            if(cp.getSaldo() >= Double.parseDouble(input)){
                                cp.sacar(Double.parseDouble(input));
                                if(cb.getClass() == ContaCorrente.class) {
                                    ContaCorrente ctmp = (ContaCorrente) cb;
                                    ctmp.depositar(Double.parseDouble(input));
                                }else{
                                    ContaPoupanca ctmp = (ContaPoupanca) cb;
                                    ctmp.depositar(Double.parseDouble(input));
                                }
                            }
                        }
                    } catch(NumberFormatException ex) {
                        JOptionPane.showMessageDialog(null, "Erro de formatação: " + ex, "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    } 
                }else{
                    JOptionPane.showMessageDialog(null, "Valor inválido!");
                }
            }else{
                JOptionPane.showMessageDialog(null, "A conta não existe!", "Atenção", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnTransferirActionPerformed

    private void voltarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_voltarMouseClicked
        MenuOptions.reset(MenuOptions.panel2);
        MenuOptions.panel2.add(new MenuPrincipal());        
    }//GEN-LAST:event_voltarMouseClicked

    private void btnRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRelatorioActionPerformed
        if(isConta)
            JOptionPane.showMessageDialog(null, "Número de conta: " + cc.getNumeroDeConta() + "\nSaldo: " + cc.getSaldo());
        else            
            JOptionPane.showMessageDialog(null, "Número de conta: " + cp.getNumeroDeConta() + "\nSaldo: " + cp.getSaldo());
    }//GEN-LAST:event_btnRelatorioActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDepositar;
    private javax.swing.JButton btnRelatorio;
    private javax.swing.JButton btnSacar;
    private javax.swing.JButton btnTransferir;
    private javax.swing.JPanel subMenu;
    private javax.swing.JLabel voltar;
    // End of variables declaration//GEN-END:variables
    private ContaPoupanca cp;
    private ContaCorrente cc;
    private boolean isConta;
}
